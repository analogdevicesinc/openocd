# SPDX-License-Identifier: GPL-2.0-or-later
# Maxim Integrated MAX32572 OpenOCD target configuration file
# www.analog.com

# Set the reset pin configuration
reset_config srst_only
adapter srst delay 200
adapter srst pulse_width 200

set CHIPNAME max32572

# This part has no internal flash

# QSPI_ENABLE is set to 1 by default after install
# Set this to 0 if external flash is not used
set QSPI_ENABLE 1

global QSPI_VDDIOH
# 1: Run QSPI at VDDIOH (3.3V)
# 0: Run QSPI at VDDIO  (1.8V)
set QSPI_VDDIOH 0

# Setup QSPI options
# Plain text => QSPI_OPTIONS = 0
# Encryption => QSPI_OPTIONS = 0x22
# Encryption and Authentication => QSPI_OPTIONS = 0x3E
set QSPI_ADDR_BASE 0x08000000
set QSPI_ADDR_SIZE 0x0800000
set QSPI_OPTIONS 0x0

# Use Serial Wire Debug
transport select swd

# Disregard flash bank created in max32xxx.cfg
source [find target/max32xxx.cfg]

if { $QSPI_ENABLE == 1} {

  if { $QSPI_VDDIOH != 0 } {
    echo "Warning - using VDDIOH (3.3V) for QSPI"
  }

  # Initialize the flash bank
  flash bank $_CHIPNAME.qspi_flash max32xxx_qspi $QSPI_ADDR_BASE $QSPI_ADDR_SIZE \
    0 0 $_CHIPNAME.cpu $QSPI_OPTIONS

  source [find mem_helper.tcl]

  # Setup the hardware to use the QSPI peripheral
  proc init_spi {} {

    global QSPI_VDDIOH

    set GCR_PCLKDIS0_ADDR 0x40000024
    set GCR_PCLKDIS1_ADDR 0x40000048
    set GCR_RST_ADDR  0x40000044

    set GPIO1_EN0_ADDR 0x40009000
    set GPIO1_OUT_EN_ADDR 0x4000900C
    set GPIO1_OUT_SET_ADDR 0x4000901C
    set GPIO1_EN1_ADDR 0x40009068
    set GPIO1_EN2_ADDR 0x40009074
    set GPIO1_DS0_ADDR 0x400090B0
    set GPIO1_DS1_ADDR 0x400090B4
    set GPIO1_VSSEL_ADDR 0x400090C0
    set GPIO1_INEN_ADDR 0x40009030
    set GPIO1_SPI_MASK 0xF03FFFFF
    set GPIO1_RST_MASK 0x06000000

    # Enable SPI and GPIO1 clocks
    set TEMP [mrw $GCR_PCLKDIS0_ADDR]
    set TEMP_MOD [expr { $TEMP & 0x3FFFFFF8} ]
    mww $GCR_PCLKDIS0_ADDR $TEMP_MOD

    # Enable the SPI XIP cache
    set TEMP [mrw $GCR_PCLKDIS1_ADDR]
    set TEMP_MOD [expr { $TEMP & 0xFFFFE7FF} ]
    mww $GCR_PCLKDIS1_ADDR $TEMP_MOD

    # Reset the SPI peripheral
    mww $GCR_RST_ADDR 0x18

    # Setup the SPI flash GPIO pins to AF1
    # Set en0, en1, and en2 registers to 0

    set TEMP [mrw $GPIO1_EN0_ADDR]
    set TEMP_MOD [expr { $TEMP & $GPIO1_SPI_MASK} ]
    mww $GPIO1_EN0_ADDR $TEMP_MOD

    set TEMP [mrw $GPIO1_EN1_ADDR]
    set TEMP_MOD [expr { $TEMP & $GPIO1_SPI_MASK} ]
    mww $GPIO1_EN1_ADDR $TEMP_MOD

    set TEMP [mrw $GPIO1_EN2_ADDR]
    set TEMP_MOD [expr { $TEMP & $GPIO1_SPI_MASK} ]
    mww $GPIO1_EN2_ADDR $TEMP_MOD

    set TEMP [mrw $GPIO1_INEN_ADDR]
    set TEMP_MOD [expr { $TEMP | 0x0fc00000} ]
    mww $GPIO1_INEN_ADDR $TEMP_MOD 

    # Set the HOLD/RST and WP lines high
    set TEMP [mrw $GPIO1_EN0_ADDR]
    set TEMP_MOD [expr { $TEMP | $GPIO1_RST_MASK} ]
    mww $GPIO1_EN0_ADDR $TEMP_MOD

    set TEMP [mrw $GPIO1_OUT_EN_ADDR]
    set TEMP_MOD [expr { $TEMP | $GPIO1_RST_MASK} ]
    mww $GPIO1_OUT_EN_ADDR $TEMP_MOD
    mww $GPIO1_OUT_SET_ADDR $GPIO1_RST_MASK

    # Max drive strength
    set TEMP [mrw $GPIO1_DS0_ADDR]
    set TEMP_MOD [expr { $TEMP | $GPIO1_RST_MASK | ~($GPIO1_SPI_MASK) } ]
    mww $GPIO1_DS0_ADDR $TEMP_MOD

    set TEMP [mrw $GPIO1_DS0_ADDR]
    set TEMP_MOD [expr { $TEMP | $GPIO1_RST_MASK | ~($GPIO1_SPI_MASK) } ]
    mww $GPIO1_DS1_ADDR $TEMP_MOD

    set TEMP [mrw $GPIO1_VSSEL_ADDR]
    set TEMP_MOD [expr { $TEMP | $GPIO1_RST_MASK | ~($GPIO1_SPI_MASK) } ]

    if {$QSPI_VDDIOH != 0} {
      # Use VDDIOH
      mww $GPIO1_VSSEL_ADDR $TEMP_MOD
    } else {
      # Use VDDIO
      mww $GPIO1_VSSEL_ADDR [expr { !($TEMP_MOD) } ]
    }

    # Finish setting up the QSPI, 1 is the flash bank id for the qspi driver
    max32xxx_qspi reset_deassert 1
  }

  $_CHIPNAME.cpu configure -event examine-end {
    init_spi
  }

  $_CHIPNAME.cpu configure -event reset-deassert-post {
    init_spi
  }
}
