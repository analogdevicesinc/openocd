# Analog Devices ADSP-SC58x
#
# SPDX-License-Identifier: GPL-2.0-or-later
# Copyright (C) 2015-2023 Analog Devices, Inc.

#
# ADSP-SC58x devices support JTAG and SWD transports.
#
#transport select jtag
#transport select swd

source [find target/swj-dp.tcl]

set CPU_MAX_ADDRESS 0xFFFFFFFF
source [find bitsbytes.tcl]
source [find memory.tcl]
source [find mem_helper.tcl]
source [find mmr_helpers.tcl]
source [find target/adspsc5xx.tcl]

# memory map

set MAP_XML [find target/adspsc58x_memory_map.xml]
set MAP_FILE [open $MAP_XML]
set _MEMORY_MAP [read $MAP_FILE]
close $MAP_FILE

global MEMORY_MAP
global SKIP_RESET

# substitute SDRAM_SIZE and FLASH_SIZE
set MEMORY_MAP [subst $_MEMORY_MAP]
set SKIP_RESET 0

# UserKey

# Uncomment the following 4 lines and change 0x00000000 to key values
#set USERKEY0 0x00000000
#set USERKEY1 0x00000000
#set USERKEY2 0x00000000
#set USERKEY3 0x00000000

if { [info exists USERKEY0] } {
   set  _USERKEY0 $USERKEY0
} else {
   set  _USERKEY0 0x00000000
}

if { [info exists USERKEY1] } {
   set  _USERKEY1 $USERKEY1
} else {
   set  _USERKEY1 0x00000000
}

if { [info exists USERKEY2] } {
   set  _USERKEY2 $USERKEY2
} else {
   set  _USERKEY2 0x00000000
}

if { [info exists USERKEY3] } {
   set  _USERKEY3 $USERKEY3
} else {
   set  _USERKEY3 0x00000000
}

# target config

if { [info exists CHIPNAME] } {
   set  _CHIPNAME $CHIPNAME
} else {
   set  _CHIPNAME adspsc58x
}

# CoreSight Debug Access Port (DAP)
if { [info exists DAP_TAPID ] } {
   set _DAP_TAPID $DAP_TAPID
} else {
   if { [using_jtag] } {
      set _DAP_TAPID 0x4ba00477
   } else {
      set _DAP_TAPID 0x3ba02477
   }
}

if { [using_swd] } {
   swj_newdap $_CHIPNAME cpu -expected-id $_DAP_TAPID
} else {
   jtag newtap $_CHIPNAME cpu -irlen 4 -expected-id $_DAP_TAPID -disable
   jtag configure $_CHIPNAME.cpu -event tap-enable "adjc_enable_dap $_CHIPNAME.adjc"

   # ADI JTAG Controller
   if { [info exists ADJC_TAPID ] } {
      set _ADJC_TAPID $ADJC_TAPID
   } else {
      set _ADJC_TAPID 0x028080cb
   }

   if { [info exists ADJC_TAPID1 ] } {
      set _ADJC_TAPID1 $ADJC_TAPID1
   } else {
      set _ADJC_TAPID1 0x128080cb
   }

   if { [info exists ADJC_TAPID2 ] } {
      set _ADJC_TAPID2 $ADJC_TAPID2
   } else {
      set _ADJC_TAPID2 0x228080cb
   }
    
   if { [info exists ADJC_TAPID3 ] } {
      set _ADJC_TAPID3 $ADJC_TAPID3
   } else {
      set _ADJC_TAPID3 0x428080cb
   }

   jtag newtap $_CHIPNAME adjc -irlen 5 -expected-id $_ADJC_TAPID -expected-id $_ADJC_TAPID1 -expected-id $_ADJC_TAPID2 -expected-id $_ADJC_TAPID3

   # Once the JRC is up, enable our TAPs
   jtag configure $_CHIPNAME.adjc -event setup "jtag tapenable $_CHIPNAME.cpu"
}

# GDB target:  Cortex-A5, using DAP
set _TARGETNAME $_CHIPNAME.cpu
dap create $_CHIPNAME.dap -chain-position $_TARGETNAME
target create $_TARGETNAME cortex_a -dap $_CHIPNAME.dap -dbgbase 0x80020000

#
# mem-ap targets
#
target create $_CHIPNAME.ahb mem_ap -dap $_CHIPNAME.dap -ap-num 0
target create $_CHIPNAME.apb mem_ap -dap $_CHIPNAME.dap -ap-num 1

# handle command that allows skipping a reset on attach
proc skip_reset {} {
   global SKIP_RESET

   set SKIP_RESET 1
}

# system reset
proc adspsc58x_system_reset {} {
   global _CHIPNAME
   
   set rcu_ctl     0x3108b000
   set rcu_stat    [expr {$rcu_ctl + 0x4}]
   set rcu_bcode   [expr {$rcu_ctl + 0x1c}]
   set rcu_msg     [expr {$rcu_ctl + 0x60}]
   set rcu_msg_clr [expr {$rcu_ctl + 0x68}]

   set cti3_cticontrol  0x3110d000
   set cti3_ctiouten2   [expr {$cti3_cticontrol + 0xa8}]
   set cti3_lar         [expr {$cti3_cticontrol + 0xfb0}]

   # Read BMODE from RCU0_STAT
   set data [memread32_phys $rcu_stat]
   set bootmode [expr {($data >> 8) & 0xf}]

   # Clear SHARC-XI debug registers for both SHARC-XI cores
   # If EMUCTL.EMUENA bit is set, the SHARC-XI core cannot be reset
   reset_sharcxi_debug_regs $_CHIPNAME.apb 0x80001000
   reset_sharcxi_debug_regs $_CHIPNAME.apb 0x80005000

   # Clear REG_RCU0_MSG
   # *pREG_RCU0_MSG = 0x0
   mww phys $rcu_msg 0

   # Deassert RSTOUT in REG_RCU0_CTL
   # *pREG_RCU0_CTL |= 0x4
   pmmw $rcu_ctl 0x4 0

   # Clear REG_RCU0_STAT
   # *pREG_RCU0_STAT = 0x7000d
   mww phys $rcu_stat 0x7000d

   # Set HALT (bit 2)
   # *pREG_RCU0_BCODE = 0x4
   mww phys $rcu_bcode 0x4

   # Use RCU_CTL to do system reset
   # *pREG_RCU0_CTL |= 0x00000001;
   $_CHIPNAME.ahb mww $rcu_ctl 0x1

   # Wait till Core 0 is idle
   # while((*pREG_RCU0_MSG & BITM_RCU_MSG_C0IDLE) == 0);
   set data 0
   set retry 0
   while { [expr {$data & 0x100}] == 0 } {
      set data [mem_ap_read_reg $rcu_msg]
      set retry [expr {$retry + 1}]
      if { $retry > 20 } break;
   }
   if { $retry > 20 } {
      set msg [format 0x%08x $data]
      log_error "BCODE.HALT failed (REG_RCU0_MSG $msg)"
   }

   # update target state
   poll

   # Halt the core
   halt

   # Clear C0IDLE from REG_RCU0_MSG
   # *pREG_RCU0_MSG_CLR = 0x100
   mww phys $rcu_msg_clr 0x100

   # Now BOOT is done
   echo "system reset done"

   # clear REG_RCU0_MSG
   mww phys $rcu_msg 0
   # clear REG_RCU0_BCODE
   mww phys $rcu_bcode 0
}

$_TARGETNAME configure -event reset-assert {
   adspsc58x_system_reset
}
 
$_TARGETNAME configure -event examine-end {
   global _CHIPNAME

   #$_CHIPNAME.ahb mww 0x31131000 0xFFFF
   # read PADS STAT register and store the value in data
   #set pads_stat 0x31004468
   #set data [memread32_phys $pads_stat]
   #if { "$_CHIPNAME" == "adspsc584" && [expr {$data & 1}] == 0 } {
   #   puts stderr "Error: ADSP-SC589 found instead of ADSP-SC584"
   #   shutdown error
   #} elseif { "$_CHIPNAME" == "adspsc589" && [expr {$data & 1}] == 1 } {
   #   puts stderr "Error: ADSP-SC584 found instead of ADSP-SC589"
   #   shutdown error
   #}
}
 
 # read register using mem-ap
 proc mem_ap_read_reg {register} {
    global _CHIPNAME
    return [$_CHIPNAME.ahb read_memory $register 32 1]
}

# default initialization
proc adspsc58x_init {} {
}

# Unless USE_CTI is set to 0, CTI is used to restart the Cortex-A5 core
# so system peripherals can be restarted at the same time

if { [info exists USE_CTI] } {
   set _USE_CTI $USE_CTI
} else {
   set _USE_CTI 1
}
if { $_USE_CTI != 0 } {
   $_TARGETNAME configure -restart-cti-reg-addr 0x3110d01c -restart-cti-channel 1
}

$_TARGETNAME configure -event gdb-attach {
   # set all bits in TAPC0_DBGCTL to enable all kinds of debug
   $_CHIPNAME.ahb mww 0x31131000 0xFFFF

   halt

   #cache_config l2x 0x10000000 8

   # read TAPC_IDCODE to get silicon revision
   # silicon revision 0.0 and 0.1 do not support system reset
   set data [mem_ap_read_reg 0x31130000]

   set si_rev [expr {($data >> 28) & 0xf}]
   if { $si_rev == 0x0 || $si_rev == 0x1 } {
      # we don't do a system reset for ADSP-SC58x silicon revision 0.0 and 0.1.

      log_error "system reset not supported for ADSP-SC58x silicon revision 0.0 and 0.1"

      # so in order to prevent a previously running TIMER0 from affecting
      # the current debug session, we mask all TIMER0 data interrupts.
      #
      # if you want to debug the program already running on the processor,
      # comment out this line so the running program will not be disturbed.
      mwh phys 0x3100101c 0xff
   } else {
      if { $SKIP_RESET == 0 } {
         reset
      }
   }

   if { $_USE_CTI != 0 } {
      adspsc5xx_configure_cti
   }

   adspsc58x_init

   arm semihosting enable
}

# TRST is toggled already in the adapter driver
reset_config none

$_TARGETNAME configure -event reset-assert-post "cortex_a dbginit"

gdb_memory_map disable